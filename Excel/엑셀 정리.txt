# 1. Basic

## 1-1. 파이썬에서 엑셀 다루기

openpyxl 라이브러리에서 Workbook을 임포트한 후 Workbook객체를 생성

이때 객체는  엑셀 파일 전체를 의미함 따라서 엑셀 시트에 접근하기 위해 특정 엑셀 시트를 의미하는 시트 객체를 선언

```python
from openpyxl import Workbook
wb = Workbook() # 새로운 Workbook 객체 생성
ws = wb.active # 현재 활성화된 sheet 가져옴
ws = wb["sheet"] # 이름을 통해서도 가져올 수 있음
wb.save("file path") # file path 주소에 엑셀파일 저장
```

load_workbook 을 통해 엑셀파일을 읽어서 가져올 수 있음

```python
from openpyxl import load_workbook
# file path에 있는 엑셀 파일 데이터로 새로운 load_workbook 객체 생성
wb = load_workbook("file path") 
ws = wb.active # 현재 활성화된 sheet 가져옴
```

** 엑셀 파일을 가져올 때 버전이 너무 높으면 못 가져올 수도 있음 **

버전을 낮추거나 먼저 Workbook으로 엑셀 파일을 생성하고 거기에 갚 옮겨서 가져오거나 할 수 있음(어차피 Workbook이나 load_workbook이나 엑셀 버전은 같을 것이기 때문에)

## 1-2. 셀 다루기

### 1. 셀 이름으로 접근

```python
ws["A1"].value = "Hello A1" # .value를 안붙이면 그냥 객체 정보임
```

### 2. row, column 값으로 접근

```python
# column : x축, row : y축, 1부터 시작
ws.cell(colunm = 2, row = 2).value = "Hellow 2X2"

# 값이 어떻게 채워지는지 주의 (지금은 컬럼부터 한 줄씩 채워짐)
for x in range(1, 11): # row 10줄
    for y in range(1, 11): # column 10줄
        ws.cell(row=x, column=y, value=index) 
        index += 1
```

### 3.  .append() 로 값 넣기

```python
# row에 한 줄씩 채워지므로 2번째 append는 2행에 값을 추가함
ws.append(["Hellow A1", "Hellow B1", "Hellow C1"])
ws.append(["Hellow A2", "Hellow B2", "Hellow C2"])
```

### 4. 특정 범위의 데이터 가져오기

```python
column_C = ws["C"] # C컬럼의 데이터의 객체 정보를 가져옴(값이 있는거만)
# C~D 데이터 가져옴, 하나의 열마다 하나의 데이터를 가져옴 즉 len(column_C_to_D) = 2
column_C_to_D = ws["C:D"]

row_Title = ws[1] # row 1번째줄 객체정보 ( 값이 있는거만)
row_Title = ws[2:6] # 2:6행의 객체 정보 가져옴 (길이는 5)
anyRowScore = ws[2:ws.max_row] # row 2 ~ 마지막 줄 까지의 데이터 (값 있는 줄까지)

#전체 row
ws.iter_rows()

# 범위 지정 가능 ( 기본값은 min_row=1, max_row=ws.max_row )
range_rows = ws.iter_rows(max_row=9, max_col=2) # 1~9행, 3~ws.max_column열까지의 데이터
# range_rows[0] 은 A1, B1의 range[5] 은 A6, B6의 객체정보를 담은 튜플값을 가짐

for row in range_rows:
    print(row[0].value, row[1].value) # 가져온 row 중 1,2번째 인덱스의 값(B,C) 출력
```

** row로만 설명한 부분도 있지만 column으로도 가능 ex) ws.max_column, iter_cols() **

### 5. 셀의 위치 찾기

coordinate_from_string 를 이용하여 가져올 수 있음

```python
from openpyxl.utils.cell import coordinate_from_string

cell = ws["A3"]
cell_position = cell.coordinate # A3
xy = coordinate_from_string(cell.coordinate) # ('A', 3)
```

## 1-3. 각종 엑셀 기능 사용

### 1. 삽입

- 엑셀 삽입 단축키
- Crtl + Shift + = : 입력 시 삽입선택창이 뜨며 어떤식으로 셀을 삽입할지 선택가능
- Shift + Spacebar : 입력 시 현재 행(row) 한 줄 선택 삽입선택창 단축키를 입력하면 지정한 행에 한 줄 추가됨
- Ctrl + Spacebar : 입력 시 현재 열(column) 한 줄 선택 삽입선택창 단축키를 입력하면 지정한 열에 한 줄 추가됨

```python
ws.insert_rows(8) # 8행에 빈 행 삽입
ws.insert_cols(3, 3) # 3열에 빈 열 3줄 삽입
```

1. 삭제 

Crtl + - : 입력시 선택한 행 혹은 열 삭제 선택하지 않았으면 어떤 식으로 삭제할지 고르는 선택창이 뜸

```python
ws.delete_rows(6) # 6번째 행 삭제
ws.delete_cols(2, 2) # 2번째 열부터 2줄 삭제
```

1. 이동

```python
# "B1:C11" : 이동 범위 지정
ws.move_range("B1:C11", rows=0, cols=3) # 이동하려는 위치에 값이 있다면 덮어씀
```

1. style

```python
# style 작업은 별도의 임포트가 필요함
from openpyxl.styles import Font, Border, Side, PatternFill, Alignment

# A열의 넓이 10으로 설정
ws.column_dimensions["A"].width = 10
# 1행의 높이 20으로 설정
ws.row_dimensions[1].height = 30

# 색깔 및 글자 효과
a1 = ws["A1"]
b1 = ws["B1"]
c1 = ws["C1"]
# a1폰트 빨간색, 이탤릭체(글자 눕히는거), bold 적용
a1.font = Font(color="FF0000", italic=True, bold=True)
# name : 폰트명, strike : 나무위키 몸통 밑줄
b1.font = Font(color="CC33FF", name="Arial", strike=True)
# 사이즈 20, 밑줄 적용
c1.font = Font(color="0000FF", size=20, underline="single")

# 중앙정렬
a1.alignment = Alignment(horizontal="center", vertical="center")

# 테두리 적용
defaultBorder = Border(right=Side(style="medium"), left=Side(style="medium"), 
													top=Side(style="medium"), bottom=Side(style="medium"))
# 하나하나 적용해야함
a1.border = defaultBorder 
b1.border = defaultBorder 
c1.border = defaultBorder
```